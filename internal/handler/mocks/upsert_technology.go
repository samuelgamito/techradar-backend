// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "techradar-backend/internal/domain"
	dto "techradar-backend/internal/handler/dto"

	mock "github.com/stretchr/testify/mock"
)

// UpsertTechnologyUseCase is an autogenerated mock type for the UpsertTechnologyUseCase type
type UpsertTechnologyUseCase struct {
	mock.Mock
}

// CreateTechnology provides a mock function with given fields: request
func (_m *UpsertTechnologyUseCase) CreateTechnology(request *domain.TechnologyDomain) *dto.ErrorResponse {
	ret := _m.Called(request)

	var r0 *dto.ErrorResponse
	if rf, ok := ret.Get(0).(func(*domain.TechnologyDomain) *dto.ErrorResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ErrorResponse)
		}
	}

	return r0
}

// MoveTechnology provides a mock function with given fields: team, friendlyTitle, request
func (_m *UpsertTechnologyUseCase) MoveTechnology(team string, friendlyTitle string, request *domain.MoveTechnologyDomain) *dto.ErrorResponse {
	ret := _m.Called(team, friendlyTitle, request)

	var r0 *dto.ErrorResponse
	if rf, ok := ret.Get(0).(func(string, string, *domain.MoveTechnologyDomain) *dto.ErrorResponse); ok {
		r0 = rf(team, friendlyTitle, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ErrorResponse)
		}
	}

	return r0
}

// UpdateTechnology provides a mock function with given fields: team, friendlyTitle, request
func (_m *UpsertTechnologyUseCase) UpdateTechnology(team string, friendlyTitle string, request *domain.UpdateTechnologyDomain) (*domain.TechnologyDomain, *dto.ErrorResponse) {
	ret := _m.Called(team, friendlyTitle, request)

	var r0 *domain.TechnologyDomain
	if rf, ok := ret.Get(0).(func(string, string, *domain.UpdateTechnologyDomain) *domain.TechnologyDomain); ok {
		r0 = rf(team, friendlyTitle, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TechnologyDomain)
		}
	}

	var r1 *dto.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, string, *domain.UpdateTechnologyDomain) *dto.ErrorResponse); ok {
		r1 = rf(team, friendlyTitle, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.ErrorResponse)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewUpsertTechnologyUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUpsertTechnologyUseCase creates a new instance of UpsertTechnologyUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUpsertTechnologyUseCase(t mockConstructorTestingTNewUpsertTechnologyUseCase) *UpsertTechnologyUseCase {
	mock := &UpsertTechnologyUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
