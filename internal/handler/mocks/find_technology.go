// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "techradar-backend/internal/domain"
	dto "techradar-backend/internal/handler/dto"

	mock "github.com/stretchr/testify/mock"
)

// FindTechnologyUseCase is an autogenerated mock type for the FindTechnologyUseCase type
type FindTechnologyUseCase struct {
	mock.Mock
}

// GetTechnologyByTeam provides a mock function with given fields: team
func (_m *FindTechnologyUseCase) GetTechnologyByTeam(team string) ([]domain.TechnologyDomain, *dto.ErrorResponse) {
	ret := _m.Called(team)

	var r0 []domain.TechnologyDomain
	if rf, ok := ret.Get(0).(func(string) []domain.TechnologyDomain); ok {
		r0 = rf(team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TechnologyDomain)
		}
	}

	var r1 *dto.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *dto.ErrorResponse); ok {
		r1 = rf(team)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.ErrorResponse)
		}
	}

	return r0, r1
}

// GetTechnologyByTeamAndQuadrants provides a mock function with given fields: team, quadrant
func (_m *FindTechnologyUseCase) GetTechnologyByTeamAndQuadrants(team string, quadrant int) ([]domain.TechnologyDomain, *dto.ErrorResponse) {
	ret := _m.Called(team, quadrant)

	var r0 []domain.TechnologyDomain
	if rf, ok := ret.Get(0).(func(string, int) []domain.TechnologyDomain); ok {
		r0 = rf(team, quadrant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.TechnologyDomain)
		}
	}

	var r1 *dto.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, int) *dto.ErrorResponse); ok {
		r1 = rf(team, quadrant)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.ErrorResponse)
		}
	}

	return r0, r1
}

// GetTechnologyByTeamAndTitle provides a mock function with given fields: name, title
func (_m *FindTechnologyUseCase) GetTechnologyByTeamAndTitle(name string, title string) (*domain.TechnologyDomain, *dto.ErrorResponse) {
	ret := _m.Called(name, title)

	var r0 *domain.TechnologyDomain
	if rf, ok := ret.Get(0).(func(string, string) *domain.TechnologyDomain); ok {
		r0 = rf(name, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TechnologyDomain)
		}
	}

	var r1 *dto.ErrorResponse
	if rf, ok := ret.Get(1).(func(string, string) *dto.ErrorResponse); ok {
		r1 = rf(name, title)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.ErrorResponse)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewFindTechnologyUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewFindTechnologyUseCase creates a new instance of FindTechnologyUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFindTechnologyUseCase(t mockConstructorTestingTNewFindTechnologyUseCase) *FindTechnologyUseCase {
	mock := &FindTechnologyUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
